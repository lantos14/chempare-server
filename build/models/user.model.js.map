{"version":3,"sources":["../../src/models/user.model.js"],"names":["mongoose","require","bcrypt","Schema","UserSchema","username","type","String","required","email","password","pre","next","user","hash","err","statics","authenticate","callback","User","findOne","exec","Error","status","compare","result","module","exports","model"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,SAASH,SAASG,MAAxB;;AAEA,IAAMC,aAAa,IAAID,MAAJ,CAAW;AAC1BE,YAAU;AACRC,UAAMC,MADE;AAERC,cAAU;AAFF,GADgB;;AAM1BC,SAAO;AACLH,UAAMC,MADD;AAELC,cAAU,IAFL,EANmB;;AAU1BE,YAAU;AACRJ,UAAMC,MADE;AAERC,cAAU;AAFF;AAVgB,CAAX,CAAnB;;AAgBAJ,WAAWO,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC,MAAMC,OAAO,IAAb;AACAX,SAAOY,IAAP,CAAYD,KAAKH,QAAjB,EAA2B,EAA3B,EAA+B,UAACK,GAAD,EAAMD,IAAN,EAAgB;AAC7C,QAAIC,GAAJ,EAAS,OAAOH,KAAKG,GAAL,CAAP;AACTF,SAAKH,QAAL,GAAgBI,IAAhB;AACAF;AACD,GAJD;AAKD,CAPD;;AASAR,WAAWY,OAAX,CAAmBC,YAAnB,GAAkC,UAAUZ,QAAV,EAAoBK,QAApB,EAA8BQ,QAA9B,EAAwC;AACxEC,OAAKC,OAAL,CAAc,EAAEf,UAAUA,QAAZ,EAAd,EACGgB,IADH,CACQ,UAAUN,GAAV,EAAeF,IAAf,EAAqB;AACzB,QAAIE,GAAJ,EAAS;AACP,aAAOG,SAASH,GAAT,CAAP;AACD,KAFD,MAEO,IAAI,CAACF,IAAL,EAAW;AAChB,UAAIE,MAAM,IAAIO,KAAJ,CAAU,iBAAV,CAAV;AACAP,UAAIQ,MAAJ,GAAa,GAAb;AACA,aAAOL,SAASH,GAAT,CAAP;AACD;;AAEDb,WAAOsB,OAAP,CAAed,QAAf,EAAyBG,KAAKH,QAA9B,EAAwC,UAAUK,GAAV,EAAeU,MAAf,EAAuB;AAC7D,UAAIA,WAAW,IAAf,EAAqB;AACnB,eAAOP,SAAS,IAAT,EAAeL,IAAf,CAAP;AACD,OAFD,MAEO;AACL,eAAOK,UAAP;AACD;AACF,KAND;AAOD,GAjBH;AAkBD,CAnBD;AAoBA;AACAQ,OAAOC,OAAP,GAAiB3B,SAAS4B,KAAT,CAAe,MAAf,EAAuBxB,UAAvB,CAAjB","file":"user.model.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst bcrypt = require('bcrypt');\r\nconst Schema = mongoose.Schema;\r\n\r\nconst UserSchema = new Schema({\r\n    username: {\r\n      type: String, \r\n      required: true,\r\n    },\r\n\r\n    email: {\r\n      type: String, \r\n      required: true},\r\n\r\n    password: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n});\r\n\r\nUserSchema.pre('save', function (next) {\r\n  const user = this;\r\n  bcrypt.hash(user.password, 10, (err, hash) =>  {\r\n    if (err) return next(err);\r\n    user.password = hash;\r\n    next();\r\n  });\r\n});\r\n\r\nUserSchema.statics.authenticate = function (username, password, callback) {\r\n  User.findOne ({ username: username })\r\n    .exec(function (err, user) {\r\n      if (err) {\r\n        return callback(err)\r\n      } else if (!user) {\r\n        var err = new Error('User not found.');\r\n        err.status = 401;\r\n        return callback(err);\r\n      }\r\n\r\n      bcrypt.compare(password, user.password, function (err, result) {\r\n        if (result === true) {\r\n          return callback(null, user);\r\n        } else {\r\n          return callback();\r\n        }\r\n      })\r\n    });\r\n}\r\n// Export the model\r\nmodule.exports = mongoose.model('User', UserSchema);"]}
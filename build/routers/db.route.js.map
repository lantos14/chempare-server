{"version":3,"sources":["../../src/routers/db.route.js"],"names":["routerDB","express","Router","route","get","req","res","next","console","log","query","store","type","status","send","error","storeQuery","split","typeQuery","Product","find","exec","err","products","length","json","post","headers","authorization","process","env","SECRET","delete","deleteMany","result","handleError","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAWC,kBAAQC,MAAR,EAAjB;;AAEAF,SACGG,KADH,CACS,WADT,EAGGC,GAHH,CAGO,gBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC7BC,UAAQC,GAAR,CAAY,MAAZ,EAAoBJ,IAAIK,KAAxB;AACA,MAAI,CAACL,IAAIK,KAAJ,CAAUC,KAAX,IAAoB,CAACN,IAAIK,KAAJ,CAAUE,IAAnC,EAAyC;AACvC,WAAON,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,yCAAT,EAArB,CAAP;AACD;AACD,MAAMC,aAAa,CAACX,IAAIK,KAAJ,CAAUC,KAAV,IAAmB,EAApB,EAAwBM,KAAxB,CAA8B,GAA9B,KAAsC,EAAzD;AACA,MAAMC,YAAY,CAACb,IAAIK,KAAJ,CAAUE,IAAV,IAAkB,EAAnB,EAAuBK,KAAvB,CAA6B,GAA7B,KAAqC,EAAvD;AACAE,oBAAQC,IAAR,CAAa;AACXT,WAAOK,UADI;AAEXJ,UAAMM;AAFK,GAAb,EAIGG,IAJH,CAIQ,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACvBf,YAAQC,GAAR,CAAY,oBAAZ,EAAkCc,SAASC,MAA3C;AACAhB,YAAQC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;AACA,WAAOA,IAAImB,IAAJ,CAAS,EAAEF,kBAAF,EAAT,CAAP;AACD,GARH;AASD,CAnBH,EAsBGG,IAtBH,CAsBQ,gBAAOrB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;;AAE9B,MAAIF,IAAIsB,OAAJ,CAAYC,aAAZ,KAA8BC,QAAQC,GAAR,CAAYC,MAA9C,EAAsD;AACpD,WAAOzB,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAAP;AACD;AACD;AACA,MAAMD,SAAS,MAAM,0BAArB;;AAEA,SAAOP,IAAImB,IAAJ,CAAS;AACdZ;AADc,GAAT,CAAP;AAGD,CAjCH,EAmCGmB,MAnCH,CAmCU,gBAAO3B,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAChCY,oBAAQc,UAAR,CAAmB,EAAnB,EAAuB,UAACX,GAAD,EAAS;AAC9B,WAAOhB,IAAImB,IAAJ,CAAS,EAAES,QAAQ,SAAV,EAAT,CAAP;AACD,GAFD;AAGD,CAvCH;;AAyCA,IAAMC,cAAc,SAAdA,WAAc,CAAUb,GAAV,EAAe;AACjCd,UAAQO,KAAR,CAAcO,GAAd;AACA;AACD,CAHD;;AAKAc,OAAOC,OAAP,GAAiBrC,QAAjB","file":"db.route.js","sourcesContent":["import express from 'express';\r\nimport Product from '../models/product.model';\r\nimport handleData from '../scheduler';\r\n\r\nconst routerDB = express.Router();\r\n\r\nrouterDB\r\n  .route('/products')\r\n\r\n  .get(async (req, res, next) => {\r\n    console.log('GET:', req.query);\r\n    if (!req.query.store || !req.query.type) {\r\n      return res.status(400).send({ error: \"Store or type data hasn't been provided\" })\r\n    }\r\n    const storeQuery = (req.query.store || '').split(',') || '';\r\n    const typeQuery = (req.query.type || '').split(',') || '';\r\n    Product.find({\r\n      store: storeQuery,\r\n      type: typeQuery,\r\n    })\r\n      .exec((err, products) => {\r\n        console.log('GET req products: ', products.length);\r\n        console.log('res: ', res);\r\n        return res.json({ products });\r\n      });\r\n  })\r\n\r\n\r\n  .post(async (req, res, next) => {\r\n\r\n    if (req.headers.authorization !== process.env.SECRET) {\r\n      return res.status(401).send(\"401 - Not authorized\");\r\n    }\r\n    // start the scraping\r\n    const status = await handleData();\r\n\r\n    return res.json({\r\n      status,\r\n    });\r\n  })\r\n\r\n  .delete(async (req, res, next) => {\r\n    Product.deleteMany({}, (err) => {\r\n      return res.json({ result: \"success\" });\r\n    });\r\n  });\r\n\r\nconst handleError = function (err) {\r\n  console.error(err);\r\n  // handle your error\r\n};\r\n\r\nmodule.exports = routerDB;"]}
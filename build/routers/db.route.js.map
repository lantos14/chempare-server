{"version":3,"sources":["../../src/routers/db.route.js"],"names":["routerDB","express","Router","route","get","req","res","next","query","store","type","status","send","error","storeQuery","split","typeQuery","Product","find","exec","err","products","json","post","headers","authorization","process","env","SECRET","delete","deleteMany","result","handleError","console","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAWC,kBAAQC,MAAR,EAAjB;;AAEAF,SACGG,KADH,CACS,WADT,EAGGC,GAHH,CAGO,gBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC7B,MAAI,CAACF,IAAIG,KAAJ,CAAUC,KAAX,IAAoB,CAACJ,IAAIG,KAAJ,CAAUE,IAAnC,EAAyC;AACvC,WAAOJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,yCAAT,EAArB,CAAP;AACD;AACD,MAAMC,aAAa,CAACT,IAAIG,KAAJ,CAAUC,KAAV,IAAmB,EAApB,EAAwBM,KAAxB,CAA8B,GAA9B,KAAsC,EAAzD;AACA,MAAMC,YAAY,CAACX,IAAIG,KAAJ,CAAUE,IAAV,IAAkB,EAAnB,EAAuBK,KAAvB,CAA6B,GAA7B,KAAqC,EAAvD;AACAE,oBAAQC,IAAR,CAAa;AACXT,WAAOK,UADI;AAEXJ,UAAMM;AAFK,GAAb,EAICG,IAJD,CAIM,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACvB,WAAOf,IAAIgB,IAAJ,CAAS,EAAED,kBAAF,EAAT,CAAP;AACD,GAND;AAOD,CAhBH,EAmBGE,IAnBH,CAmBQ,gBAAOlB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;;AAE9B,MAAIF,IAAImB,OAAJ,CAAYC,aAAZ,KAA8BC,QAAQC,GAAR,CAAYC,MAA9C,EAAsD;AACpD,WAAOtB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAAP;AACD;AACD;AACA,MAAMD,SAAS,MAAM,0BAArB;;AAEA,SAAOL,IAAIgB,IAAJ,CAAS;AACdX;AADc,GAAT,CAAP;AAGD,CA9BH,EAgCGkB,MAhCH,CAgCU,gBAAOxB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAChCU,oBAAQa,UAAR,CAAmB,EAAnB,EAAwB,UAACV,GAAD,EAAS;AAC/B,WAAOd,IAAIgB,IAAJ,CAAS,EAAES,QAAQ,SAAV,EAAT,CAAP;AACD,GAFD;AAGD,CApCH;;AAsCE,IAAMC,cAAc,SAAdA,WAAc,CAAUZ,GAAV,EAAe;AACnCa,UAAQpB,KAAR,CAAcO,GAAd;AACA;AACD,CAHC;;AAKFc,OAAOC,OAAP,GAAiBnC,QAAjB","file":"db.route.js","sourcesContent":["import express from 'express';\r\nimport Product from '../models/product.model';\r\nimport handleData from '../scheduler';\r\n\r\nconst routerDB = express.Router();\r\n\r\nrouterDB\r\n  .route('/products')\r\n\r\n  .get(async (req, res, next) => {\r\n    if (!req.query.store || !req.query.type) {\r\n      return res.status(400).send({ error: \"Store or type data hasn't been provided\" })\r\n    }\r\n    const storeQuery = (req.query.store || '').split(',') || '';\r\n    const typeQuery = (req.query.type || '').split(',') || '';\r\n    Product.find({\r\n      store: storeQuery,\r\n      type: typeQuery,\r\n    })\r\n    .exec((err, products) => {\r\n      return res.json({ products });\r\n    });\r\n  })\r\n\r\n  \r\n  .post(async (req, res, next) => {\r\n    \r\n    if (req.headers.authorization !== process.env.SECRET) {\r\n      return res.status(401).send(\"401 - Not authorized\");\r\n    }\r\n    // start the scraping\r\n    const status = await handleData();\r\n\r\n    return res.json({\r\n      status,\r\n    });\r\n  })\r\n  \r\n  .delete(async (req, res, next) => {\r\n    Product.deleteMany({ }, (err) => {\r\n      return res.json({ result: \"success\" });\r\n    });\r\n  });\r\n\r\n  const handleError = function (err) {\r\n  console.error(err);\r\n  // handle your error\r\n};\r\n\r\nmodule.exports = routerDB;"]}
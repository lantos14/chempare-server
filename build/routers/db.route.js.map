{"version":3,"sources":["../../src/routers/db.route.js"],"names":["routerDB","express","Router","route","get","req","res","next","limit","parseInt","query","console","log","Product","find","store","type","exec","err","products","json","post","headers","authorization","process","env","SECRET","status","send","result","productCategories","forEach","productCategoryList","product_instance","product","img","name","price","save","handleError","delete","deleteMany","error","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAWC,kBAAQC,MAAR,EAAjB;;AAEAF,SACGG,KADH,CACS,WADT,EAGGC,GAHH,CAGO,gBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC7B,MAAMC,QAAQC,SAASJ,IAAIK,KAAJ,CAAUF,KAAnB,KAA6B,EAA3C;AACAG,UAAQC,GAAR,CAAY,SAAZ,EAAuBJ,KAAvB;AACAK,oBAAQC,IAAR,CAAa;AACXC,WAAO,CAAC,IAAD,EAAO,QAAP,CADI;AAEXC,UAAM,CAAC,kBAAD;AAFK,GAAb,EAICR,KAJD,CAIOA,KAJP,EAKCS,IALD,CAKM,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACvB,WAAOb,IAAIc,IAAJ,CAAS,EAAED,kBAAF,EAAT,CAAP;AACD,GAPD;AAQD,CAdH,EAiBGE,IAjBH,CAiBQ,gBAAOhB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;;AAE9B,MAAIF,IAAIiB,OAAJ,CAAYC,aAAZ,KAA8BC,QAAQC,GAAR,CAAYC,MAA9C,EAAsD;AACpD,WAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAAP;AACD;AACD;AACA,MAAMC,SAAS,MAAM,gCAAiBC,mBAAjB,CAArB;;AAEA,QAAMD,OAAOE,OAAP,CAAe,+BAAuB;AAC1CC,wBAAoBD,OAApB,CAA4B,mBAAW;;AAErC;AACA,UAAME,mBAAmB,IAAIpB,iBAAJ,CAAY;AACnC,eAAOqB,QAAQC,GADoB;AAEnC,gBAAQD,QAAQE,IAFmB;AAGnC,iBAASF,QAAQG,KAHkB;AAInC,iBAASH,QAAQnB,KAJkB;AAKnC,gBAAQmB,QAAQlB;AALmB,OAAZ,CAAzB;;AAQA;AACAiB,uBAAiBK,IAAjB,CAAsB,UAAUpB,GAAV,EAAe;AACnC,YAAIA,GAAJ,EAAS,OAAOqB,YAAYrB,GAAZ,CAAP;AAEV,OAHD;AAID,KAhBD;AAiBD,GAlBK,CAAN;;AAoBA,SAAOZ,IAAIc,IAAJ,CAAS;AACd,cAAU;AADI,GAAT,CAAP;AAGD,CAhDH,EAkDGoB,MAlDH,CAkDU,gBAAOnC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAChCM,oBAAQ4B,UAAR,CAAmB,EAAnB,EAAwB,UAACvB,GAAD,EAAS;AAC/B,WAAOZ,IAAIc,IAAJ,CAAS,EAAES,QAAQ,SAAV,EAAT,CAAP;AACD,GAFD;AAGD,CAtDH;;AAwDE,IAAMU,cAAc,SAAdA,WAAc,CAAUrB,GAAV,EAAe;AACnCP,UAAQ+B,KAAR,CAAcxB,GAAd;AACA;AACD,CAHC;;AAKFyB,OAAOC,OAAP,GAAiB5C,QAAjB","file":"db.route.js","sourcesContent":["import express from 'express';\r\nimport Product from '../models/product.model';\r\nimport scrapeController from '../Scrapers/scrapeController';\r\nimport productCategories from '../Scrapers/catFilter';\r\nimport countProductsSum from '../utilities/countProductsSum';\r\n\r\nconst routerDB = express.Router();\r\n\r\nrouterDB\r\n  .route('/products')\r\n\r\n  .get(async (req, res, next) => {\r\n    const limit = parseInt(req.query.limit) || 30;\r\n    console.log('limit: ', limit);\r\n    Product.find({\r\n      store: ['hm', 'promod'],\r\n      type: ['pulover-kardigan']\r\n    })\r\n    .limit(limit)\r\n    .exec((err, products) => {\r\n      return res.json({ products });\r\n    });\r\n  })\r\n\r\n  \r\n  .post(async (req, res, next) => {\r\n    \r\n    if (req.headers.authorization !== process.env.SECRET) {\r\n      return res.status(401).send(\"401 - Not authorized\");\r\n    }\r\n    // start the scraping\r\n    const result = await scrapeController(productCategories);\r\n    \r\n    await result.forEach(productCategoryList => {\r\n      productCategoryList.forEach(product => {\r\n        \r\n        // Create an instance of model Product\r\n        const product_instance = new Product({\r\n          \"img\": product.img,\r\n          \"name\": product.name,\r\n          \"price\": product.price,\r\n          \"store\": product.store,\r\n          \"type\": product.type,\r\n        });\r\n        \r\n        // Save the new model instance, passing a callback\r\n        product_instance.save(function (err) {\r\n          if (err) return handleError(err);\r\n          \r\n        });\r\n      });\r\n    })\r\n    \r\n    return res.json({\r\n      \"status\": \"ok\",\r\n    });\r\n  })\r\n  \r\n  .delete(async (req, res, next) => {\r\n    Product.deleteMany({ }, (err) => {\r\n      return res.json({ result: \"success\" });\r\n    });\r\n  });\r\n\r\n  const handleError = function (err) {\r\n  console.error(err);\r\n  // handle your error\r\n};\r\n\r\nmodule.exports = routerDB;"]}